from alpha_vantage.timeseries import TimeSeries
import json


def save_dataset(symbol):


    ts = TimeSeries(key='ME4NPOSQIEI6WCNZ', output_format='pandas')
    data, meta_data = ts.get_daily(symbol, outputsize='full')

    data.to_csv(f'./]symbol}_daily.csv')
    
    
#save_dataset('MSFT')


import pandas as pd
from sklearn import preprocessing
import numpy as np
from keras.models import load_model
history_points = 50

def csv_to_dataset(csv_path):
    global history_points
    global data_normaliser
    global data_normalised
    data = pd.read_csv(csv_path)
    data = data.drop('date', axis=1)
    data = data.drop(0, axis=0)
    
    data_normaliser = preprocessing.MinMaxScaler()
    data_normalised = data_normaliser.fit_transform(data)
    
    ohlcv_histories_normalised =      np.array([data_normalised[i  : i + history_points].copy() for i in range(len(data_normalised) - history_points)])
    next_day_open_values_normalised = np.array([data_normalised[:,0][i + history_points].copy() for i in range(len(data_normalised) - history_points)]) 
    #next_day_open_values_normalised = np.expand_dims(next_day_open_values_normalised, -1)
    
    next_day_open_values = np.array([data['1. open'][i + history_points].copy() for i in range(len(data) - history_points)])
    next_day_open_values = next_day_open_values_normalised
    
    #y_normaliser = preprocessing.MinMaxScaler()
    #y_normaliser.fit_transform(np.expand_dims( next_day_open_values , -1))
 
    def calc_ema(values, time_period):
        # https://www.investopedia.com/ask/answers/122314/what-exponential-moving-average-ema-formula-and-how-ema-calculated.asp
        sma = np.mean(values[:,3])
        ema_values = [sma]
        k = 2 / (1 + time_period)
        for i in range(len(his) - time_period, len(his)):
            close = his[i][3]
            ema_values.append(close * k + ema_values[-1] * (1 - k))
        return ema_values[-1]
		 
    
    
    technical_indicators = []
    for his in ohlcv_histories_normalised:
        # since we are using his[3] we are taking the SMA of the closing price
        sma = np.mean(his[:,3])
        macd = calc_ema(his, 12) - calc_ema(his, 26)
        
        technical_indicators.append(np.array([sma,macd,]))   

    technical_indicators = np.array(technical_indicators)
    global tech_ind_scaler
    tech_ind_scaler = preprocessing.MinMaxScaler()
    technical_indicators_normalised = tech_ind_scaler.fit_transform(technical_indicators)
    
    
    
    assert ohlcv_histories_normalised.shape[0] == next_day_open_values_normalised.shape[0] == technical_indicators_normalised.shape[0]
    return ohlcv_histories_normalised, technical_indicators_normalised, next_day_open_values_normalised, next_day_open_values




def inverse_return(obj):
    trainPredict_dataset_like2 = np.zeros(shape=(len(obj), 5) )
# put the predicted values in the right field
    trainPredict_dataset_like2[:,0] = obj[:,0]
# inverse transform and then select the right field
    real = data_normaliser.inverse_transform(trainPredict_dataset_like2)[:,0]
    return real



ohlcv_histories, technical_indicators, next_day_open_values, unscaled_y = csv_to_dataset('MSFT_daily.csv')


model = load_model('my_model.h5')


test_split = 0.9
n = int(ohlcv_histories.shape[0] * test_split)

ohlcv_train = ohlcv_histories[:n]
tech_ind_train = technical_indicators[:n]
y_train = next_day_open_values[:n]

ohlcv_test = ohlcv_histories[n:]
tech_ind_test = technical_indicators[n:]
y_test = next_day_open_values[n:]

unscaled_y_test = unscaled_y[n:]

y_test_predicted = model.predict([ohlcv_test, tech_ind_test])
pred = inverse_return(y_test_predicted)

unscaled_y_test.shape = y_test_predicted.shape

real = inverse_return(unscaled_y_test)



pred_buffer = pred
real_buffer = real

real_mse = np.mean(np.square(real - pred))
scaled_mse = real_mse / (np.max(real) - np.min(real)) * 100

print(real_mse , scaled_mse)
buys = []
sells = []
thresh = 0.1

start = 0
end = -1


buys = []
sells = []
thresh = 0.1

x = 0
for ohlcv, ind in zip(ohlcv_histories[start: end], technical_indicators[start: end]):
    normalised_price_today = ohlcv[-1][0]
    normalised_price_today = np.array([[normalised_price_today]])
    price_today = inverse_return(normalised_price_today)
    predicted = np.squeeze(inverse_return( model.predict([[ohlcv], [ind]])))
    delta = predicted - price_today
    # print(delta)
    if delta > thresh:
        buys.append((x, price_today[0]))
    elif delta < -thresh:
        sells.append((x, price_today[0]))
    x += 1
print(len(buys))
print(len(sells))




def compute_earnings(buys_, sells_):
    purchase_amt = 10
    stock = 0
    balance = 0
    while len(buys_) > 0 and len(sells_) > 0:
        if buys_[0][0] < sells_[0][0]:
            # time to buy $10 worth of stock
            balance -= purchase_amt
            stock += purchase_amt / buys_[0][1]
            buys_.pop(0)
        else:
            # time to sell all of our stock
            balance += stock * sells_[0][1]
            stock = 0
            sells_.pop(0)
    print(f"earnings: $]balance}")



compute_earnings([b for b in buys], [s for s in sells])


#import matplotlib.pyplot as plt
#
#plt.gcf().set_size_inches(22, 15, forward=True)
#
#real = plt.plot(real_buffer[start:end], label='real')
#pred = plt.plot(pred_buffer[start:end], label='predicted')
#
#if len(buys) > 0:
#    plt.scatter(list(list(zip(*buys))[0]), list(list(zip(*buys))[1]), c='#00ff00', s=50)
#if len(sells) > 0:
#    plt.scatter(list(list(zip(*sells))[0]), list(list(zip(*sells))[1]), c='#ff0000', s=50)
#
## real = plt.plot(unscaled_y[start:end], label='real')
## pred = plt.plot(y_predicted[start:end], label='predicted')
#
#plt.legend(['Real', 'Predicted', 'Buy', 'Sell'])
#
#plt.show()


#command to predict
#inverse_return(model.predict([[ohlcv_histories[233]], [technical_indicators[233]]]))







